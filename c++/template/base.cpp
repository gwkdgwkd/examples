#include <iostream>

using namespace std;

// 泛型程序设计（generic programming）是一种算法在实现时不指定具体要操作的数据的类型的程序设计方法。
// 所谓“泛型”，指的是算法只要实现一遍，就能适用于多种数据类型。泛型程序设计方法的优势在于能够减少重复代码的编写。
// 泛型程序设计的概念最早出现于1983年的Ada语言，其最成功的应用就是C++的标准模板库（STL）。
// 也可以说，泛型程序设计就是大量编写模板、使用模板的程序设计。泛型程序设计在C++中的重要性和带来的好处不亚于面向对象的特性。
// 在C++中，模板分为函数模板和类模板两种。熟练的C++程序员，在编写函数时都会考虑能否将其写成函数模板，编写类时都会考虑能否将其写成类模板，以便实现重用。

// 计算机编程语言种类繁多，目前能够查询到的有600多种，常用的不超过20种，TIOBE每个月都会发布世界编程语言排行榜，统计前50名编程语言的市场份额以及它们的变动趋势。
// 该榜单反映了编程语言的热门程度，程序员可以据此来检查自己的开发技能是否跟得上趋势，公司或机构也可以据此做出战略调整。
// 这些编程语言根据不同的标准可以分为不同的种类，根据“在定义变量时是否需要显式地指明数据类型”可以分为强类型语言和弱类型语言。
// 强类型语言在定义变量时需要显式地指明数据类型，并且一旦为变量指明了某种数据类型，该变量以后就不能赋予其他类型的数据了，除非经过强制类型转换或隐式类型转换。
// 典型的强类型语言有C/C++、Java、C#等。Java对类型转换的要求比C/C++更为严格，隐式转换只允许由低向高转，由高向低转必须强制转换。
// 弱类型语言在定义变量时不需要显式地指明数据类型，编译器（解释器）会根据赋给变量的数据自动推导出类型，并且可以赋给变量不同类型的数据。
// 典型的弱类型语言有JavaScript、Python、PHP、Ruby、Shell、Perl等。
// 这里的强类型和弱类型是站在变量定义和类型转换的角度讲的，并把C/C++归为强类型语言。另外还有一种说法是站在编译和运行的角度，并把C/C++归为弱类型语言。
// 类型对于编程语言来说非常重要，不同的类型支持不同的操作。不管是强类型语言还是弱类型语言，在编译器（解释器）内部都有一个类型系统来维护变量的各种信息。
// 对于强类型的语言，变量的类型从始至终都是确定的、不变的，编译器在编译期间就能检测某个变量的操作是否正确，这样最终生成的程序中就不用再维护一套类型信息了，从而减少
// 了内存的使用，加快了程序的运行。不过这种说法也不是绝对的，有些特殊情况还是要等到运行阶段才能确定变量的类型信息。比如C++中的多态，编译器在编译阶段会在对象内存模
// 型中增加虚函数表、type_info对象等辅助信息，以维护一个完整的继承链，等到程序运行后再执行一段代码才能确定调用哪个函数。
// 对于弱类型的语言，变量的类型可以随时改变，赋予它什么类型的数据它就是什么类型，编译器在编译期间不好确定变量的类型，只有等到程序运行后、真的赋给变量一个值了，才能
// 确定变量当前是什么类型，所以传统的编译对弱类型语言意义不大，因为即使编译了也有很多东西确定不下来。
// 弱类型语言往往是一边执行一边编译，这样可以根据上下文（可以理解为当前的执行环境）推导出很多有用信息，让编译更加高效。将这种一边执行一边编译的语言称为解释型语言，
// 而将传统的先编译后执行的语言称为编译型语言。
// 强类型语言较为严谨，在编译时就能发现很多错误，适合开发大型的、系统级的、工业级的项目；而弱类型语言较为灵活，编码效率高，部署容易，学习成本低，在Web开发中大显身
// 手。另外，强类型语言的IDE一般都比较强大，代码感知能力好，提示信息丰富；而弱类型语言一般都是在编辑器中直接书写代码。
// PHP不使用模板就可以处理多种类型，它天生对类型就不敏感。C++不一样，是强类型的，比较“死板”，所以后来C++开始支持模板了，主要就是为了弥补强类型语言“不够灵活”的缺点。
// 模板所支持的类型是宽泛的，没有限制的，我们可以使用任意类型来替换，这种编程方式称为泛型编程（Generic Programming）。
// 相应地，可以将参数T看做是一个泛型，而将int、float、string等看做是一种具体的类型。除了C++，Java、C#、Pascal（Delphi）也都支持泛型编程。
// C++模板也是被迫推出的，最直接的动力来源于对数据结构的封装。数据结构关注的是数据的存储，以及存储后如何进行增加、删除、修改和查询操作，它是一门基础性的学科，在实际
// 开发中有着非常广泛的应用。C++开发者们希望为线性表、链表、图、树等常见的数据结构都定义一个类，并加入到标准库中，这样以后程序员就不用重复造轮子了，直接使用即可。
// 但是这个时候遇到了一个无法解决的问题，就是数据结构中每份数据的类型无法提前预测。以链表为例，它的每个节点可以用来存储小数、整数、字符串等，也可以用来存储一名学生、
// 教师、司机等，还可以直接存储二进制数据，这些都是可以的，没有任何限制。而C++又是强类型的，数据的种类受到了严格的限制，这种矛盾是无法调和的。
// 想解决这个问题，C++必须推陈出新，跳出现有规则的限制，开发新的技术，于是模板诞生了。模板虽不是C++首创，但却在C++中大放异彩，后来也被Java、C#等其他强类型语言采用。
// C++模板有着复杂的语法，可不仅仅是前面两节讲到的那么简单，它的话题可以写一本书。C++模板也非常重要，整个标准库几乎都是使用模板来开发的，STL更是经典之作。

int main() { return 0; }