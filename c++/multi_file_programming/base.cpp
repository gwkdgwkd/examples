#include <iostream>

using namespace std;

// 任何一个C++项目，其内部往往包含的不是单个源文件，而是多个源文件，甚至在很多C++项目中还会利用子文件夹对诸多源文件进行分门别类。
// 简单地理解C++多文件编程，其就是把多个头文件（.h文件）和源文件（.cpp文件）组合在一起构成一个程序，这是C++的重点，也是C++的难点。
// 在C++多文件编程中，头文件的编写是重点内容，有很多细节需要注意，有的甚至会让你感觉奇怪。
// 所有的代码都位于main.cpp文件中。对于代码量几十行或者几百行的小程序，这或许无可厚非，但当程序膨胀代码到几千行甚至上万行后，就应该考虑将代码“分散”到多个文件中。
// 注意这里所谓的“分散”，并不是胡乱地划分。为了方便后期的维护，分散代码应遵循一个基本原则：实现相同功能的代码应存储在一个文件中。
// 事实上，一个完整的C++项目常常是由多个代码文件组成的，根据后缀名的不同，大致可以将它们分为如下2类：
//  .h文件：又称“头文件”，用于存放常量、函数的声明部分、类的声明部分；
//  .cpp文件：又称“源文件”，用于存放变量、函数的定义部分，类的实现部分。
// 实际上，.cpp文件和.h文件都是源文件，除了后缀不一样便于区分和管理外，其他的几乎相同，在.cpp中编写的代码同样也可以写在.h中。之所以将.cpp文件和.h文件在项目中承
// 担的角色进行区别，不是C++语法的规定，而是约定成俗的规范，读者遵守即可。
// 虽然类内部的成员函数可以在声明的同时进行定义（自动成为内联函数），但原则上不推荐这样使用。也就是说，即便定义成员函数的代码很少，其定义也应该放在适当的.cpp文件中。
// 另外对于一些系统提供的库，出于版权和保密的考虑，大多是已经编译好的二进制文件，其中可能仅包含.h文件，而没有.cpp文件。

// 总之项目越大，多文件编程的优势越明显。
// 项目─┐
//       ├ student.h
//       ├ student.cpp
//       └ main.cpp
// 项目─┐
//       ├─ include ┐
//       │           ├ student.h
//       │           └ ...
//       ├─ source ┐
//        ...        ├ student.cpp
//                   ├ main.cpp
//                   └ ...

int main() { return 0; }