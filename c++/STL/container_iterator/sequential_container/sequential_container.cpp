#include <iostream>

// 所谓序列容器，即以线性排列（类似普通数组）来存储某一指定类型的数据，
// 需要特殊说明的是，该类容器并不会自动对存储的元素按照值的大小进行排序。
// 需要注意的是，序列容器只是一类容器的统称，
// 并不指具体的某个容器，序列容器大致包含以下几类容器：
// 1.array<T,N>（数组容器）：
//   表示可以存储N个T类型的元素，是C++本身提供的一种容器。
//   此类容器一旦建立，其长度就是固定不变的，
//   这意味着不能增加或删除元素，只能改变某个元素的值；
// 2.vector<T>（向量容器）：
//   用来存放T类型的元素，是一个长度可变的序列容器，
//   即在存储空间不足时，会自动申请更多的内存。
//   使用此容器，在尾部增加或删除元素的效率最高，时间复杂度为O(1)常数阶；
//   在其它位置插入或删除元素效率较差，时间复杂度为O(n)线性阶，
//   其中n为容器中元素的个数。
// 3.deque<T>（双端队列容器）：
//   和vector非常相似，区别在于使用该容器不仅尾部插入和删除元素高效，
//   在头部插入或删除元素也同样高效，时间复杂度都是O(1)常数阶；
//   但是在容器中某一位置处插入或删除元素，时间复杂度为O(n)线性阶。
// 4.list<T>（链表容器）：
//   是一个长度可变的、由T类型元素组成的序列，它以双向链表的形式组织元素，
//   在这个序列的任何地方都可以高效地增加或删除元素，时间复杂度都为常数阶O(1)；
//   但访问容器中任意元素的速度要比前三种容器慢，
//   这是因为list<T>必须从第一个元素或最后一个元素开始访问，
//   需要沿着链表移动，直到到达想要的元素。
// 5.forward_list<T>（正向链表容器）：
//   和list容器非常类似，只不过它以单链表的形式组织元素，
//   它内部的元素只能从第一个元素开始访问，
//   是一类比链表容器快、更节省内存的容器。
// 6.stack<T>和queue<T>本质上也属于序列容器，
//   只不过它们都是在deque容器的基础上改头换面而成，
//   通常更习惯称它们为容器适配器。

// array、vector和deque容器的函数成员:
// 函数成员 	     函数功能 	                                   array<T,N> vector<T> deque<T>
// begin() 	        返回指向容器中第一个元素的迭代器。 	                  是 	      是 	   是
// end() 	        返回指向容器最后一个元素所在位置后一个位置的迭代器，     是          是       是
//                  通常和begin()结合使用。
// rbegin() 	    返回指向最后一个元素的迭代器。 	                     是 	     是 	   是
// rend() 	        返回指向第一个元素所在位置前一个位置的迭代器。 	        是 	        是 	      是
// cbegin() 	    和begin()功能相同，只不过在其基础上，                是           是       是
//                  增加了const属性，不能用于修改元素。
// cend() 	        和end()功能相同，只不过在其基础上，                  是          是        是
//                  增加了const属性，不能用于修改元素。
// crbegin() 	    和rbegin()功能相同，只不过在其基础上，               是          是        是
//                  增加了const属性，不能用于修改元素。
// crend() 	        和rend()功能相同，只不过在其基础上，                 是          是        是
//                  增加了const属性，不能用于修改元素。
// assign() 	    用新元素替换原有内容。 	                            - 	        是 	      是
// operator=()      复制同类型容器的元素，或者用初始化列表替换现有内容。 	 是           是        是
// size() 	        返回实际元素个数。 	                               是           是        是
// max_size() 	    返回元素个数的最大值。这通常是一个很大的值，            是          是         是
//                  一般是2^32-1，所以很少会用到这个函数。
// capacity() 	    返回当前容量。 	                                   - 	       是 	     -
// empty() 	        判断容器中是否有元素，若无元素，则返回true；           是           是        是
//                  反之，返回false。
// resize() 	    改变实际元素的个数。 	                            - 	         是 	   是
// shrink_to_fit()  将内存减少到等于当前元素实际所使用的大小。 	            - 	         是 	   是
// front() 	        返回第一个元素的引用。 	                            是            是        是
// back() 	        返回最后一个元素的引用。 	                         是 	      是 	     是
// operator[]() 	使用索引访问元素。 	                                是           是         是
// at() 	        使用经过边界检査的索引访问元素。 	                  是 	       是 	       是
// push_back() 	    在序列的尾部添加一个元素。 	                         - 	          是 	      是
// insert() 	    在指定的位置插入一个或多个元素。 	                  - 	       是 	       是
// emplace() 	    在指定的位置直接生成一个元素。 	                      - 	       是 	       是
// emplace_back() 	在序列尾部生成一个元素。 	                         - 	          是 	      是
// pop_back() 	    移出序列尾部的元素。 	                             - 	         是 	     是
// erase() 	        移出一个元素或一段元素。 	                         - 	          是 	      是
// clear() 	        移出所有的元素，容器大小变为0。 	                  - 	       是 	       是
// swap() 	        交换两个容器的所有元素。 	                         是 	      是 	       是
// data() 	        返回指向容器中第一个元素的指针。 	                   是          是 	        -

// list和forward_list的函数成员:
// 函数成员          函数功能 	                                   list<T> forward_list<T>
// begin() 	        返回指向容器中第一个元素的迭代器。 	                是 	        是
// end() 	        返回指向容器最后一个元素所在位置后一个位置的迭代器。   是          是
// rbegin() 	    返回指向最后一个元素的迭代器。 	                    是 	        -
// rend() 	        返回指向第一个元素所在位置前一个位置的迭代器。 	       是 	       -
// cbegin() 	    和begin()功能相同，只不过在其基础上，               是 	        是
//                  增加了const属性，不能用于修改元素。
// before_begin() 	返回指向第一个元素前一个位置的迭代器。 	              - 	     是
// cbefore_begin() 	和before_begin()功能相同，只不过在其基础上，         - 	        是
//                  增加了const属性，即不能用该指针修改元素的值。
// cend()           和end()功能相同，只不过在其基础上，                  是 	     是
//                  增加了const属性，不能用于修改元素。
// crbegin() 	    和rbegin()功能相同，只不过在其基础上，               是 	     -
//                  增加了const属性，不能用于修改元素。
// crend() 	        和rend()功能相同，只不过在其基础上，                 是 	     -
//                  增加了const属性，不能用于修改元素。
// assign() 	    用新元素替换原有内容。 	                            是 	        是
// operator=() 	    复制同类型容器的元素，或者用初始化列表替换现有内容。 	 是 	     是
// size() 	        返回实际元素个数。 	                               是 	       -
// max_size() 	    返回元素个数的最大值，这通常是一个很大的值，            是 	        是
//                  一般是2^32-1，所以很少会用到这个函数。
// resize() 	    改变实际元素的个数。 	                            是 	        是
// empty() 	        判断容器中是否有元素，若无元素，则返回true；           是 	        是
//                  反之，返回false。
// front() 	        返回容器中第一个元素的引用。 	                     是 	      是
// back() 	        返回容器中最后一个元素的引用。 	                     是 	       -
// push_back() 	    在序列的尾部添加一个元素。 	                        是 	          -
// push_front() 	在序列的起始位置添加一个元素。 	                     是            是
// emplace() 	    在指定位置直接生成一个元素。 	                     是            -
// emplace_after() 	在指定位置的后面直接生成一个元素。 	                  - 	       是
// emplace_back() 	在序列尾部生成一个元素。 	                        是 	          -
// cmplacc_front() 	在序列的起始位生成一个元索。 	                     是           是
// insert() 	    在指定的位置插入一个或多个元素。 	                  是 	       -
// insert_after() 	在指定位置的后面插入一个或多个元素。 	               - 	       是
// pop_back() 	    移除序列尾部的元素。 	                            是 	         -
// pop_front() 	    移除序列头部的元素。 	                            是 	         是
// reverse() 	    反转容器中某一段的元素。 	                         是           是
// erase() 	        移除指定位置的一个元素或一段元素。 	                   是 	        -
// erase_after() 	移除指定位置后面的一个元素或一段元素。                  - 	        是
// remove() 	    移除所有和参数匹配的元素。 	                         是 	      是
// remove_if() 	    移除满足一元函数条件的所有元素。                      是 	       是
// unique() 	    移除所有连续重复的元素。 	                         是 	      是
// clear() 	        移除所有的元素，容器大小变为0。 	                  是 	       是
// swap() 	        交换两个容器的所有元素。 	                         是 	      是
// sort() 	        对元素进行排序。 	                                是 	         是
// merge() 	        合并两个有序容器。 	                                是 	         是
// splice() 	    移动指定位置前面的所有元素到另一个同类型的list中。 	     是 	      -
// splice_after() 	移动指定位置后面的所有元素到另一个同类型的list中。 	     - 	          是

int main() { return 0; }