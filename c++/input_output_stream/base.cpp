#include <iostream>

// 在C语言中，我们通常会使用scanf和printf来对数据进行输入输出操作。
// 在C++语言中，C语言的这一套输入输出库我们仍然能使用，
// 但是C++又增加了一套新的、更容易使用的输入输出库。
// C++中的输入与输出可以看做是一连串的数据流，输入即可视为从文件或键盘中输入程序中的一串数据流，
// 而输出则可以视为从程序中输出一连串的数据流到显示屏或文件中。
// 在编写C++程序时，如果需要使用输入输出时，则需要包含头文件iostream，它包含了用于输入输出的对象，
// 例如常见的cin表示标准输入、cout表示标准输出、cerr表示标准错误。
// cout和cin都是C++的内置对象，而不是关键字。
// C++库定义了大量的类，程序员可以使用它们来创建对象，cout和cin就分别是ostream和istream类的对象，
// 只不过它们是由标准库的开发者提前创建好的，可以直接拿来使用。
// 这种在C++中提前创建好的对象称为内置对象。
// 使用cout进行输出时需要紧跟<<运算符，使用cin进行输入时需要紧跟>>运算符，
// 这两个运算符可以自行分析所处理的数据类型，因此无需像使用scanf和printf那样给出格式控制字符串。
// endl表示换行，与C语言里的\n作用相同。
// cout能够连续地输出。同样cin也是支持对多个变量连续输入的。
// cout、cin的用法非常强大灵活，推荐使用cin、cout，它们比C语言中的scanf、printf更加灵活易用。

// 通常情况下，C++程序中使用cin输入流实现数据的输入，用cout输出流实现数据的输出。
// 除此之外，C++还提供有适用于特定场景的输入输出流，比如cerr、clog等。
// C++输入输出流本质上就是已经定义好的类对象，之所以称它们为"流"，C++开发者认为数据传输的过程像水一样，
// 从一个地方流到另一个地方，所以称实现输入的为输入流，实现数据输出的为输出流。
// 作为类对象，C++输入流和输出流不仅可以实现基本的输入输出操作，
// 通过类内部的成员函数，还可以满足特殊场景中的输入输出需求。

// C++又可以称为“带类的C”，即可以理解为C++是C语言的基础上增加了面向对象（类和对象）。
// 在此基础上，学过C语言的读者应该知道，它有一整套完成数据读写（I/O）的解决方案：
// 1.使用scanf()、gets()等函数从键盘读取数据，使用printf()、puts()等函数向屏幕上输出数据；
// 2.使用fscanf()、fgets()等函数读取文件中的数据，使用fprintf()、fputs()等函数向文件中写入数据。
// 要知道，C语言的这套I/O解决方案也适用于C++程序，但C++并没有“偷懒”，
// 它自己独立开发了一套全新的I/O解决方案，其中就包含大家一直使用的cin和cout。
// 用cin接收从键盘输入的数据，用cout向屏幕上输出数据（这2个过程又统称为“标准I/O”）。
// 除此之外，C++也对从文件中读取数据和向文件中写入数据做了支持（统称为“文件I/O”）。
// C++的这套I/O解决方案就是一个包含很多类的类库（作为C++标准库的组成部分），这些类常被称为“流类”。
// C++的开发者认为数据输入和输出的过程也是数据传输的过程，数据像水一样从一个地方流动到另一个地方，
// 所以C++中将此过程称为“流”，实现此过程的类称为“流类”。
// C++中用于实现数据输入和输出的这些流类以及它们之间的关系：
//                          ios
//                      ↙         ↘
//                  istream     ostream
//                  ↙    ↘       ↙    ↘
//            ifstream   iostream    ofstream
//                           ↓
//                        fstream
// ios是所有流类的基类，它派生出istream和ostream。
// 特别需要指出的是，为了避免多继承的二义性，从ios派生出istream和ostream时，
// 均使用了virtual关键字（虚继承）。
// 这些流类各自的功能分别为：
//  istream：常用于接收从键盘输入的数据；
//  ostream：常用于将数据输出到屏幕上；
//  ifstream：用于读取文件中的数据；
//  ofstream：用于向文件中写入数据；
//  iostream：继承自istream和ostream类，因为该类的功能兼两者于一身，既能用于输入，也能用于输出；
//  fstream：兼ifstream和ofstream类功能于一身，既能读取文件中的数据，又能向文件中写入数据。

// cin就是istream类的对象，cout是ostream类的对象，
// 它们都声明在<iostream>头文件中，还要声明std命名空间。
// <iostream>头文件中还声明有2个ostream 类对象，分别为cerr和clog。
// 它们的用法和cout完全一样，但cerr常用来输出警告和错误信息给程序的使用者，
// clog常用来输出程序执行过程中的日志信息。
// cout、cerr和clog之间的区别如下：
// 1.cout除了可以将数据输出到屏幕上，通过重定向，还可以实现将数据输出到指定文件中；
//   而cerr和clog都不支持重定向，它们只能将数据输出到屏幕上；
// 2.cout和clog都设有缓冲区，即它们在输出数据时，会先将要数据放到缓冲区，
//   等缓冲区满或者手动换行（使用换行符'\n'或者endl）时，才会将数据全部显示到屏幕上；
//   而cerr则不设缓冲区，它会直接将数据输出到屏幕上。
// 除了以上2点特性上的不同之外，cerr、clog和cout没有任何不同。
// 之所以我们常用cout，是因为cerr和clog有各自不同的适用场景。
// 以cerr为例，一旦程序某处使用cerr输出数据， 我们自然而然地会认为此处输出的是警告或者错误信息。
// 值得一提的是，类似cin、cout、cerr和clog这样，它们都是C++标准库的开发者创建好的，
// 可以直接拿来使用，这种在C++中提前创建好的对象称为内置对象。
// 实际上，<iostream>头文件中还声明有处理宽字符的4个内置对象，分别为wcin、wcout、wcerr以及wclog。

// istream和ostream类提供了很多实用的函数，cin、cout、cerr和clog作为类对象，当然也能调用。
// cin输入流对象常用成员方法:
//  getline(str,n,ch) 	从输入流中接收n-1个字符给str变量，当遇到指定ch字符时会停止读取，默认情况下ch为'\0'。
//  get() 	            从输入流中读取一个字符，同时该字符会从输入流中消失。
//  gcount()  返回上次从输入流提取出的字符个数，
//            该函数常和get()、getline()、ignore()、peek()、read()、readsome()、putback()和unget()联用。
//  peek() 	            返回输入流中的第一个字符，但并不是提取该字符。
//  putback(c)  	    将字符c置入输入流（缓冲区）。
//  ignore(n,ch)  从输入流中逐个提取字符，但提取出的字符被忽略，不被使用，直至提取出n个字符，或者当前读取的字符为ch。
//  operator>> 	        重载>>运算符，用于读取指定类型的数据，并返回输入流对象本身。
// cout、cerr和clog对象常用的一些成员方法以及它们的功能：
//  put() 	      输出单个字符。
//  write() 	  输出指定的字符串。
//  tellp() 	  用于获取当前输出流指针的位置。
//  seekp() 	  设置输出流指针的位置。
//  flush() 	  刷新输出流缓冲区。
//  operator<< 	  重载<<运算符，使其用于输出其后指定类型的数据。

int main() {}