#include <fstream>
#include <iostream>

// 内存中存放的数据在计算机关机后就会消失。
// 要长久保存数据，就要使用硬盘、光盘、U盘等设备。
// 为了便于数据的管理和检索，引入了文件的概念。
// 所有的文件本质上都是一样的，都是由一个个字节组成的，归根到底都是0、1比特串。
// 不同的文件呈现出不同的形态（有的是文本，有的是视频等等），
// 这主要是文件的创建者和解释者（使用文件的软件）约定好了文件格式。
// 除了纯文本文件外，图像、视频、可执行文件等一般被称作二进制文件。
// 二进制文件如果用记事本程序打开，看到的是一片乱码。
// 所谓文本文件和二进制文件，只是约定俗成的、从计算机用户角度出发进行的分类，
// 并不是计算机科学的分类。
// 因为从计算机科学的角度来看，所有的文件都是由二进制位组成的，都是二进制文件。
// 文本文件和其他二进制文件只是格式不同而已。
// 实际上，只要规定好格式，而且不怕浪费空间，
// 用文本文件一样可以表示图像、声音、视频甚至可执行程序。

// C++文件操作主要分为2类，即读文件和写文件，常见的C++文件操作，
// 包括（但不限于）打开文件、读取和追加数据、插入和删除数据、关闭文件、删除文件等。
// 为了方便用户实现文件操作，C++提供了3个文件流类，定义在<fstream>头文件中：
// 1.ofstream，实现写文件；
// 2.ifstream，实现读文件；
// 3.fstream，实现读写文件。
// 关于文件操作，虽然在C++程序中可以继续沿用C语言的那套文件操作方式，
// 但更推荐使用适当的文件流类来读写文件。

// ifstream类和fstream类是从istream类派生而来的，
// 因此ifstream类拥有istream类的全部成员方法。
// 同样地，ofstream和fstream类也拥有ostream类的全部成员方法。
// 这也就意味着，istream和ostream类提供的供cin和cout调用的成员方法，
// 也同样适用于文件流。
// 并且这3个类中有些成员方法是相同的，
// 比如operator <<()、operator >>()、peek()、ignore()、getline()、get()等。
// 值得一提的是，和<iostream>头文件中定义有ostream和istream类的对象cin和cout不同，
// <fstream>头文件中并没有定义可直接使用的fstream、ifstream和ofstream类对象。
// 因此，如果我们想使用该类操作文件，需要自己创建相应类的对象。
// 为什么C++标准库不提供现成的类似fin或者fout的对象呢？
// 其实很简单，文件输入流和输出流的输入输出设备是硬盘中的文件，
// 硬盘上有很多文件，到底应该使用哪一个呢？
// 所以，C++标准库就把创建文件流对象的任务交给用户了。

// fstream类拥有ifstream和ofstream类中所有的成员方法，
// fstream类一些常用的成员方法:
// 1.fstream、fstream、ofstream
//   open() 	    打开指定文件，使其与文件流对象相关联。
//   is_open() 	  检查指定文件是否已打开。
//   close() 	    关闭文件，切断和文件流对象的关联。
//   swap() 	    交换2个文件流对象。
//   good() 	 	  操作成功，没有发生任何错误。
//   eof() 	      到达输入末尾或文件尾。
// 2.fstream、ifstream
//   operator>> 	 	    重载>>运算符，用于从指定文件中读取数据。
//   gcount() 	        返回上次从文件流提取出的字符个数。
//                      该函数常和get()、getline()、ignore()、peek()、
//                      read()、readsome()、putback()和unget()联用。
//   get() 	            从文件流中读取一个字符，同时该字符会从输入流中消失。
//   getline(str,n,ch)  从文件流中接收n-1个字符给str变量，
//                      当遇到指定ch字符时会停止读取，默认情况下ch为'\0'。
//   ignore(n,ch) 	    从文件流中逐个提取字符，但提取出的字符被忽略，不被使用，
//                      直至提取出n个字符，或者当前读取的字符为ch。
//   peek() 	          返回文件流中的第一个字符，但并不是提取该字符。
//   putback(c) 	      将字符c置入文件流（缓冲区）。
// 3.fstream、ofstream
//   operator<< 重载<<运算符，用于向文件中写入指定数据。
//   put() 	    向指定文件流中写入单个字符。
//   write() 	  向指定文件中写入字符串。
//   tellp() 	  用于获取当前文件输出流指针的位置。
//   seekp() 	  设置输出文件输出流指针的位置。
//   flush() 	  刷新文件输出流缓冲区。
// 无论是读取文件中的数据，还是向文件中写入数据，
// 最先要做的就是调用open()成员方法打开文件。
// 同时在操作文件结束后，还必须要调用close()成员方法关闭文件。

int main() {
  const char *url = "http://c.biancheng.net/cplus/";
  std::fstream fs;
  fs.open("test.txt", std::ios::out);
  fs.write(url, 30);
  fs.close();

  return 0;
}