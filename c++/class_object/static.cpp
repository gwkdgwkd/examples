#include <iostream>

using namespace std;

// 对象的内存中包含了成员变量，不同的对象占用不同的内存，这使得不同对象的成员变量相互独立，它们的值不受其他对象的影响。
// 可是有时候我们希望在多个对象之间共享数据，对象a改变了某份数据后对象b可以检测到。共享数据的典型使用场景是计数。
// 在C++中，我们可以使用静态成员变量来实现多个对象共享数据的目标。静态成员变量是一种特殊的成员变量，它被关键字static修饰。
// static成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只分配一份内存，所有对象使用的都是这份内存中的数据。当某个对象修改了，也会影响到其他对象。
// 静态成员变量在初始化时不能再加static，但必须要有数据类型。被private、protected、public修饰的静态成员变量都可以用这种方式初始化。
// static成员变量的内存既不是在声明类时分配，也不是在创建对象时分配，而是在（类外）初始化时分配。反过来说，没有在类外初始化的static成员变量不能使用。
// static成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问。static成员变量和普通的static变量类似，都在内存分区中的全局数据区分配内存
// 几点说明:
//  1) 一个类中可以有一个或多个静态成员变量，所有的对象都共享这些静态成员变量，都可以引用它。
//  2) static成员变量和普通static变量一样，都在内存分区中的全局数据区分配内存，到程序结束时才释放。这就意味着，static成员变量不随对象的创建而分配内存，也不随对象
//     的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。
//  3) 静态成员变量必须初始化，而且只能在类体外进行。初始化时可以赋初值，也可以不赋值。如果不赋值，那么会被默认初始化为0。
//     全局数据区的变量都有默认的初始值0，而动态数据区（堆区、栈区）变量的默认值是不确定的，一般认为是垃圾值。
//  4) 静态成员变量既可以通过对象名访问，也可以通过类名访问，但要遵循private、protected和public的访问权限限制。当通过对象名访问时，对于不同的对象，访问的是同一份内存。

// 在类中，static 除了可以声明静态成员变量，还可以声明静态成员函数。普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。
// 编译器在编译一个普通成员函数时，会隐式地增加一个形参this，并把当前对象的地址赋值给this，所以普通成员函数只能在创建对象后通过对象来调用，因为它需要当前对象的地址。
// 而静态成员函数可以通过类来直接调用，编译器不会为它增加形参this，它不需要当前对象的地址，所以不管有没有创建对象，都可以调用静态成员函数。
// 普通成员变量占用对象的内存，静态成员函数没有this指针，不知道指向哪个对象，无法访问对象的成员变量，也就是说静态成员函数不能访问普通成员变量，只能访问静态成员变量。
// 普通成员函数必须通过对象才能调用，而静态成员函数没有this指针，无法在函数体内部访问某个对象，所以不能调用普通成员函数，只能调用静态成员函数。
// 静态成员函数与普通成员函数的根本区别在于：普通成员函数有this指针，可以访问类中的任意成员；而静态成员函数没有this指针，只能访问静态成员（包括静态成员变量和静态成员函数）。
// 和静态成员变量类似，静态成员函数在声明时要加static，在定义时不能加static。静态成员函数可以通过类来调用（一般都是这样做），也可以通过对象来调用。

class S {
 public:
  static int a;
};
int S::a;  // 初始化时可以赋初值，也可以不赋值。

class Student {
 public:
  Student(char *name, int age, float score);
  void show();
  // 在C++中，静态成员函数的主要目的是访问静态成员。getTotal()、getPoints()当然也可以声明为普通成员函数，但是它们都只对静态成员进行操作，加上static语义更加明确。
  static int getTotal();
  static float getPoints();

 private:
  static int m_total;
  static float m_points;

 private:
  char *m_name;
  int m_age;
  float m_score;
};
// static成员变量必须在类声明的外部初始化，具体形式为：
int Student::m_total = 0;
float Student::m_points = 0.0;
Student::Student(char *name, int age, float score)
    : m_name(name), m_age(age), m_score(score) {
  m_total++;
  m_points += score;
}
void Student::show() {
  cout << m_name << "的年龄是" << m_age << "，成绩是" << m_score << "（当前共有"
       << m_total << "名学生）" << endl;
}
int Student::getTotal() { return m_total; }
float Student::getPoints() { return m_points; }

int main() {
  // static成员变量既可以通过对象来访问，也可以通过类来访问。
  S::a = 10;  // 通过类访问
  S s;
  s.a = 20;  // 通过对象来访问static成员变量
  S *ps = new S;
  ps->a = 30;  // 通过对象指针来访问static成员变量

  // 创建匿名对象
  (new Student((char *)"小明", 15, 90))->show();
  (new Student((char *)"李磊", 16, 80))->show();
  (new Student((char *)"张华", 16, 99))->show();
  (new Student((char *)"王康", 14, 60))->show();
  // 小明的年龄是15，成绩是90（当前共有1名学生）
  // 李磊的年龄是16，成绩是80（当前共有2名学生）
  // 张华的年龄是16，成绩是99（当前共有3名学生）
  // 王康的年龄是14，成绩是60（当前共有4名学生）

  int total = Student::getTotal();
  float points = Student::getPoints();
  cout << "当前共有" << total << "名学生，总成绩是" << points << "，平均分是"
       << points / total << endl;
  // 当前共有4名学生，总成绩是329，平均分是82.25

  return 0;
}