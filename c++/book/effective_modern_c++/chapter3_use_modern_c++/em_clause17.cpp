#include <iostream>
#include <map>

// 条款17：理解特殊成员函数的生成

namespace n1 {
// 在C++术语中，特殊成员函数是指C++自己生成的函数。
// C++98有四个：默认构造函数，析构函数，拷贝构造函数，拷贝赋值运算符。
// 这些函数仅在需要的时候才生成，比如某个代码使用它们但是它们没有在类中明确声明。
// 默认构造函数仅在类完全没有构造函数的时候才生成。
// 生成的特殊成员函数是隐式public且inline，它们是非虚的，除非它们是在派生类中的析构函数，
// 并且继承的基类是虚析构函数，在这种情况下，编译器为派生类生成的析构函数是虚的。
}  // namespace n1

namespace n2 {
// C++11特殊成员函数俱乐部迎来了两位新会员，移动构造函数和移动赋值运算符：
class Widget {
 public:
  Widget(Widget&& rhs);             // 移动构造函数
  Widget& operator=(Widget&& rhs);  // 移动赋值运算符
};

// 掌控它们生成和行为的规则类似于拷贝系列，移动操作仅在需要的时候生成，
// 如果生成了，就会对类的non-static数据成员执行逐成员的移动。
// 那意味着移动构造函数根据rhs参数里面对应的成员移动构造出新non-static部分，
// 移动赋值运算符根据参数里面对应的non-static成员移动赋值。
// 移动构造函数也移动构造基类部分（如果有的话），移动赋值运算符也是移动赋值基类部分。

// 当对数据成员或者基类使用移动构造或者移动赋值时，没有任何保证移动一定会真的发生。
// 逐成员移动实际上更像是逐成员移动请求，因为对不可移动类型，即对移动操作没有特殊支持的类型，
// 比如大部分C++98传统类，使用移动操作实际上执行的是拷贝操作。
// 逐成员移动的核心是对对象使用std::move，然后函数决议时会选择执行移动还是拷贝操作。
// 如果支持移动就会逐成员移动类成员和基类成员，如果不支持移动就执行拷贝操作就好了。

// 像拷贝操作情况一样，如果自己声明了移动操作，编译器就不会生成，
// 然而它们生成的精确条件与拷贝操作的条件有点不同：
// 1.两个拷贝操作是独立的，声明一个不会限制编译器生成另一个，
//   所以如果声明一个拷贝构造函数，但是没有声明拷贝赋值运算符，
//   如果写的代码用到了拷贝赋值，编译器会帮助你生成拷贝赋值运算符，
//   同样的，如果你声明拷贝赋值运算符但是没有拷贝构造函数，
//   代码用到拷贝构造函数时编译器就会生成它，上述规则在C++98和C++11中都成立；
// 2.两个移动操作不是相互独立的，如果声明了其中一个，编译器就不再生成另一个，
//   如果类声明了一个移动构造函数，就表明对于移动操作应怎样实现，
//   与编译器应生成的默认逐成员移动有些区别，如果逐成员移动构造有些问题，
//   那么逐成员移动赋值同样也可能有问题，所以声明移动构造函数阻止移动赋值运算符的生成，
//   声明移动赋值运算符同样阻止编译器生成移动构造函数；
// 3.如果一个类显式声明了拷贝操作，编译器就不会生成移动操作，
//   这种限制的解释是如果声明拷贝操作（构造或赋值）就暗示着平常拷贝对象的方法不适用于该类，
//   编译器会明白如果逐成员拷贝对拷贝操作来说不合适，逐成员移动也可能对移动操作来说不合适；
// 4.声明移动操作（构造或赋值）使得编译器禁用拷贝操作，编译器通过给拷贝加上delete来保证，
//   禁用的是自动生成的拷贝操作，对于用户声明的拷贝操作不受影响，
//   毕竟，如果逐成员移动对该类来说不合适，也没有理由指望逐成员拷贝操作是合适的，
//   听起来会破坏C++98的某些代码，因为C++11中拷贝操作可用的条件比C++98更受限，
//   但事实并非如此，C++98的代码没有移动操作，因为C++98中没有移动对象这种概念，
//   只有一种方法能让老代码使用用户声明的移动操作，那就是使用C++11标准然后添加这些操作，
//   使用了移动语义的类必须接受C++11特殊成员函数生成规则的限制。

// Rule of Three_规则说如果声明了拷贝构造函数，拷贝赋值运算符，
// 或者析构函数三者之一，应该也声明其余两个，它来源于长期的观察。
// 即用户接管拷贝操作的需求几乎都是因为该类会做其他资源的管理，
// 这也几乎意味着无论哪种资源管理如果在一个拷贝操作内完成，
// 也应该在另一个拷贝操作内完成类的析构函数也需要参与资源的管理（通常是释放）。
// 通常要管理的资源是内存，标准库里面那些管理内存的类都声明了：拷贝构造，拷贝赋值和析构。

// Rule of Three带来的后果就是只要出现用户定义的析构函数，
// 就意味着简单的逐成员拷贝操作不适用于该类。
// 那意味着如果一个类声明了析构，拷贝操作可能不应该自动生成，因为它们做的事情可能是错误的。
// 在C++98提出的时候，上述推理没有得倒足够的重视，
// 所以C++98用户声明析构函数不会左右编译器生成拷贝操作的意愿。
// C++11中情况仍然如此，但仅仅是因为限制拷贝操作生成的条件会破坏老代码。

// Rule of
// Three规则背后的解释依然有效，再加上对声明拷贝操作阻止移动操作隐式生成的观察，
// 使得C++11不会为那些有用户定义的析构函数的类生成移动操作。

// 所以仅当下面条件成立时才会生成移动操作（当需要时）：
// 1.类中没有拷贝操作；
// 2.类中没有移动操作；
// 3.类中没有用户定义的析构。
}  // namespace n2

namespace n3 {
// 有时，类似的规则也适用与拷贝，C++11抛弃了已声明拷贝操作或析构函数的类的拷贝操作的自动生成。
// 这意味着如果某个声明了析构或者拷贝的类依赖自动生成的拷贝操作，应该考虑升级这些类，消除依赖。
// 假设编译器生成的函数行为是正确的，使用C++11的=default就可以：
class Widget {
 public:
  ~Widget();                        // 用户声明的析构函数
  Widget(const Widget&) = default;  // 默认拷贝构造函数的行为还可以
  Widget& operator=(const Widget&) = default;  // 默认拷贝赋值运算符的行为还可以
};

// 这种方法通常在多态基类中很有用，即通过操作的是哪个派生类对象来定义接口。
// 多态基类通常有一个虚析构函数，因为如果它们非虚，一些操作会产生未定义或错误结果，
// 比如通过一个基类指针或者引用对派生类对象使用delete或者typeid。
// 除非类继承了一个已经是virtual的析构函数，否则要想析构函数为虚函数的唯一方法就是加上virtual。
// 通常，默认实现是对的，=default是一个不错的方式表达默认实现。
// 然而用户声明的析构函数会抑制编译器生成移动操作，所以如果该类需要具有移动性，
// 就为移动操作加上=default，声明移动会抑制拷贝生成，
// 所以如果拷贝性也需要支持，再为拷贝操作加上=default：
class Base {
 public:
  virtual ~Base() = default;  // 使析构函数virtual
  Base(Base&&) = default;     // 支持移动
  Base& operator=(Base&&) = default;
  Base(const Base&) = default;  // 支持拷贝
  Base& operator=(const Base&) = default;
};

namespace test1 {
// 实际上，就算编译器乐于为你的类生成拷贝和移动操作，生成的函数也如你所愿，
// 也应该手动声明它们然后加上=default，这看起来比较多余，但是它让你的意图更明确，
// 也能帮助你避免一些微妙的bug，比如，你有一个类来表示字符串表，
// 即一种支持使用整数ID快速查找字符串值的数据结构：
class StringTable {
 public:
  StringTable() {}
  // 插入、删除、查找等函数，但是没有拷贝、移动、析构功能，如果被用到编译器会自动生成
 private:
  std::map<int, std::string> values;
};
}  // namespace test1

namespace test2 {
// 后来需要在对象构造和析构中打日志，增加这种功能很简单：
class StringTable {
 public:
  StringTable() { std::cout << "Creating StringTable object" << std::endl; }
  ~StringTable() { std::cout << "Destroying StringTable object" << std::endl; }
  // 看起来合情合理，但是声明析构有潜在的副作用：它阻止了移动操作的生成。
  // 然而，拷贝操作的生成是不受影响的，因此代码能通过编译，运行，也能打日志。
  // 也包括移动功能，因为即使该类不支持移动操作，对该类的移动请求也能通过编译和运行。
  // 这个请求正如之前提到的，会转而由拷贝操作完成。
  // 它意味着对StringTable对象的移动实际上是对对象的拷贝，
  // 即拷贝里面的std::map<int,std::string>对象，拷贝很可能比移动慢几个数量级。
  // 简单的加个析构就引入了极大的性能问题，对拷贝和移动操作显式加个=default，问题将不再出现。

 private:
  std::map<int, std::string> values;
};
}  // namespace test2
}  // namespace n3

namespace n4 {
// C++11对于特殊成员函数处理的规则如下：
// 1.默认构造函数，和C++98规则相同，仅当类不存在用户声明的构造函数时才自动生成；
// 2.析构函数，基本上和C++98相同，稍微不同的是现在析构默认noexcept，
//   和C++98一样，仅当基类析构为虚函数时该类析构才为虚函数；
// 3.拷贝构造函数，和C++98运行时行为一样，逐成员拷贝non-static数据，
//   仅当类没有用户定义的拷贝构造时才生，如果类声明了移动操作它就是delete的，
//   当用户声明了拷贝赋值或者析构，该函数自动生成已被废弃；
// 4.拷贝赋值运算符，和C++98运行时行为一样，逐成员拷贝赋值non-static数据，
//   仅当类没有用户定义的拷贝赋值时才生成，如果类声明了移动操作它就是delete的，
//   当用户声明了拷贝构造或者析构，该函数自动生成已被废弃；
// 5.移动构造函数和移动赋值运算符，都对非static数据执行逐成员移动，
//   仅当类没有用户定义的拷贝操作，移动操作或析构时才自动生成。

// 没有成员函数模版阻止编译器生成特殊成员函数的规则，这意味着如果Widget是这样：
class Widget {
  template <typename T>  // 从任何东西构造Widget
  Widget(const T& rhs);

  template <typename T>  // 从任何东西赋值给Widget
  Widget& operator=(const T& rhs);
};
// 编译器仍会生成移动和拷贝操作，即使可以模板实例化产出拷贝构造和拷贝赋值运算符的函数签名。
// 很可能会觉得这是一个不值得承认的边缘情况，但它是有道理的，详见条款26。
}  // namespace n4

// 要记住的东西：
// 1.特殊成员函数是编译器可能自动生成的函数：默认构造函数，析构函数，拷贝操作，移动操作；
// 2.移动操作仅当类没有显式声明移动操作，拷贝操作，析构函数时才自动生成；
// 3.拷贝构造函数仅当类没有显式声明拷贝构造函数时才自动生成，并且如果用户声明了移动操作，
//   拷贝构造就是delete，拷贝赋值运算符仅当类没有显式声明拷贝赋值运算符时才自动生成，
//   并且如果用户声明了移动操作，拷贝赋值运算符就是delete，当用户声明了析构函数，
//   拷贝操作的自动生成已被废弃；
// 4.成员函数模板不抑制特殊成员函数的生成。

int main(int argc, char* argv[]) {
  if (argc < 2) {
    std::cout << argv[0] << " i [0 - 2]" << std::endl;
    return 0;
  }
  int type = argv[1][0] - '0';
  switch (type) {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
    default:
      std::cout << "invalid type" << std::endl;
      break;
  }

  return 0;
}